#include <iostream>
#include <stdlib.h>
using namespace std;

typedef struct data
{
    int number;
    string name;
    int age;
}data;


//单链表节点类型的描述
typedef struct Lnode{
    data *information;
    struct Lnode *next;
}Lnode,*Linklist;


//双链表节点类型的描述
typedef struct Dnode{
    data *information;
    struct Dnode *prior,*next;
}Dnode,*Dinklist;

//头插法建立
Linklist List_Headinsert(Linklist &L)
{
    Lnode *new_node;
    int x;//链表长度
    L = (Linklist)malloc(sizeof(Lnode));//头节点创建
    L->next=NULL;//一个空链表
    cin>>x;
    for(int i=0;i<x;i++)
    {
        new_node = (Lnode*)malloc(sizeof(Lnode));
        cin>>new_node->information->name;
        cin>>new_node->information->age;
        cin>>new_node->information->number;
        new_node->next = L->next;//下一节点指针指向空
        L->next = new_node;//头节点指指针向下一节点
    }
    return L;
}

//尾插法实现链表
Linklist List_tailinsert(Linklist &L)
{
    Lnode *new_node,*r = L;
    int x;//链表长度
    L = (Linklist)malloc(sizeof(Lnode));//头节点创建
    r->next=L;//表尾指针
    cin>>x;
    for(int i=0;i<x;i++)
    {
        new_node = (Lnode*)malloc(sizeof(Lnode));
        cin>>new_node->information->name;
        cin>>new_node->information->age;
        cin>>new_node->information->number;
        r->next = new_node;//头节点指指针向下一节点
        r = new_node;//表尾地址更改为下一节点
    }
    return L;//返回头节点
}

//按序号查找节点值
Lnode *GetElme(Linklist L,int i)
{
    int j = 1;
    Lnode *p = L->next;
    if(i==0)
        return L;
    if(i<0)
        return NULL;
    while(p&&j<i)
    {
        p=p->next;
        j++;
    }
    return p;
}

//按值查找节点
Lnode *locateElme(Linklist L,data *in)
{
    Lnode *p = L->next;
    while(p!=NULL&&p->information!=in)
        p = p->next;
    return p;
}

//插入节点
Linklist List_Frontinsert(Linklist L,int i)
{
    //得到插入节点的位置
    int j = 1;
    Lnode *p = L->next;
    if(i==0)
        p = L->next;
    if(i<0)
        return NULL;
    while(p&&j<i-1)
    {
        p=p->next;
        j++;
    }

    //插入操作
    Lnode *newnode,*temp;//创建新节点和临时节点
    newnode->next = p->next;
    p->next = newnode;
    temp->information = p->information;
    p->information = newnode->information;
    newnode->information = temp->information;
}


//删除节点操作
Linklist nodeRemove(Linklist L,int i)
{
    int j = 1;
    Lnode *p = L->next;
    if(i==0)
        p = L->next;
    if(i<0)
        return NULL;
    while(p&&j<i-1)
    {
        p=p->next;
        j++;
    }
    Lnode *q = p->next;
    p->next = q->next;
    free(q);
}


//节点更改
Linklist change(Linklist L,int i)
{
    int j = 1;
    Lnode *p = L->next;
    if(i==0)
        p = L->next;
    if(i<0)
        return NULL;
    while(p&&j<i)
    {
        p=p->next;
        j++;
    }
    cin>>p->information->age;
    cin>>p->information->name;
    cin>>p->information->number;
}


//Linux内核链表实现
struct list_head {
    struct list_head *next, *prev;
};

struct list_node {
    struct list_node *next;
    data *informetion;
};

